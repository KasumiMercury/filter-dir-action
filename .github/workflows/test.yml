name: Test

on:
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'

jobs:
  test:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      
    - name: Setup Node.js
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: TypeScript compilation check
      run: npm run build
      
    - name: Run tests with coverage
      run: npm run test:coverage
      
    - name: Generate Coverage Report
      id: coverage
      run: |
        if [ -f coverage/coverage-final.json ]; then
          echo "## üß™ Test Coverage Report"
          echo ""
          node -e "
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
            const files = Object.keys(coverage);
            let totalStatements = 0, coveredStatements = 0;
            let totalBranches = 0, coveredBranches = 0;
            let totalFunctions = 0, coveredFunctions = 0;
            let totalLines = 0, coveredLines = 0;
            
            files.forEach(file => {
              const data = coverage[file];
              totalStatements += data.s ? Object.keys(data.s).length : 0;
              coveredStatements += data.s ? Object.values(data.s).filter(x => x > 0).length : 0;
              totalBranches += data.b ? Object.keys(data.b).length : 0;
              coveredBranches += data.b ? Object.values(data.b).filter(branches => branches.some(x => x > 0)).length : 0;
              totalFunctions += data.f ? Object.keys(data.f).length : 0;
              coveredFunctions += data.f ? Object.values(data.f).filter(x => x > 0).length : 0;
              totalLines += data.l ? Object.keys(data.l).length : 0;
              coveredLines += data.l ? Object.values(data.l).filter(x => x > 0).length : 0;
            });
            
            const statementsPct = totalStatements > 0 ? (coveredStatements / totalStatements * 100).toFixed(2) : '0.00';
            const branchesPct = totalBranches > 0 ? (coveredBranches / totalBranches * 100).toFixed(2) : '0.00';
            const functionsPct = totalFunctions > 0 ? (coveredFunctions / totalFunctions * 100).toFixed(2) : '0.00';
            const linesPct = totalLines > 0 ? (coveredLines / totalLines * 100).toFixed(2) : '0.00';
            
            console.log('| Metric | Coverage | Covered/Total |');
            console.log('|--------|----------|---------------|');
            console.log(`| **Statements** | **${statementsPct}%** | ${coveredStatements}/${totalStatements} |`);
            console.log(`| **Branches** | **${branchesPct}%** | ${coveredBranches}/${totalBranches} |`);
            console.log(`| **Functions** | **${functionsPct}%** | ${coveredFunctions}/${totalFunctions} |`);
            console.log(`| **Lines** | **${linesPct}%** | ${coveredLines}/${totalLines} |`);
            console.log('');
            console.log('Generated by [Vitest](https://vitest.dev/) ‚ö°');
          "
        else
          echo "## ‚ùå Coverage Report"
          echo "Coverage data not found. Please check the test execution."
        fi
        
